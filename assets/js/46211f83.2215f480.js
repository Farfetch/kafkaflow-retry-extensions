"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[485],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>f});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),p=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(a),g=n,f=d["".concat(l,".").concat(g)]||d[g]||c[g]||o;return a?r.createElement(f,i(i({ref:t},u),{},{components:a})):r.createElement(f,i({ref:t},u))}));function f(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,i=new Array(o);i[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:n,i[1]=s;for(var p=2;p<o;p++)i[p]=a[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}g.displayName="MDXCreateElement"},7858:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=a(7462),n=(a(7294),a(3905));const o={sidebar_position:3},i="Durable Retries",s={unversionedId:"guides/durable-retries",id:"guides/durable-retries",title:"Durable Retries",description:"In this section, we will learn how to use Durable Retries.",source:"@site/docs/guides/durable-retries.md",sourceDirName:"guides",slug:"/guides/durable-retries",permalink:"/kafkaflow-retry-extensions/guides/durable-retries",draft:!1,editUrl:"https://github.com/farfetch/kafkaflow-retry-extensions/tree/main/website/docs/guides/durable-retries.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Forever Retries",permalink:"/kafkaflow-retry-extensions/guides/forever-retries"},next:{title:"Exception Handling",permalink:"/kafkaflow-retry-extensions/guides/exception-handling"}},l={},p=[{value:"How to use it",id:"how-to-use-it",level:2},{value:"How to configure Message Type and Serialization",id:"how-to-configure-message-type-and-serialization",level:2},{value:"How to use MongoDb as a Provider",id:"how-to-use-mongodb-as-a-provider",level:2},{value:"How to use SQL Server as a Provider",id:"how-to-use-sql-server-as-a-provider",level:2},{value:"How to use Postgres as a Provider",id:"how-to-use-postgres-as-a-provider",level:2},{value:"How to configure an HTTP API to manage the Data Provider",id:"how-to-configure-an-http-api-to-manage-the-data-provider",level:2}],u={toc:p};function d(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"durable-retries"},"Durable Retries"),(0,n.kt)("p",null,"In this section, we will learn how to use Durable Retries."),(0,n.kt)("p",null,"Durable Retries are useful when beyond a certain amount of retries and waiting, you want to keep processing next-in-line messages but you can't lose the current offset message.\nAs persistence databases, MongoDb or SqlServer is available. And you can manage in-retry messages through HTTP API.    "),(0,n.kt)("p",null,"The configuration can be done during ",(0,n.kt)("a",{parentName:"p",href:"https://farfetch.github.io/kafkaflow/docs/guides/configuration"},"KafkaFlow Configuration")," process by registering a ",(0,n.kt)("a",{parentName:"p",href:"https://farfetch.github.io/kafkaflow/docs/guides/middlewares/"},"Middleware"),"."),(0,n.kt)("h2",{id:"how-to-use-it"},"How to use it"),(0,n.kt)("p",null,"Install the ",(0,n.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/KafkaFlow.Retry"},"KafkaFlow.Retry")," package. "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"dotnet add package KafkaFlow.Retry\n")),(0,n.kt)("p",null,"Install the package for the desired storage:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"SqlServer: ",(0,n.kt)("a",{parentName:"li",href:"https://www.nuget.org/packages/KafkaFlow.Retry.SqlServer"},"KafkaFlow.Retry.SqlServer")," "),(0,n.kt)("li",{parentName:"ul"},"Postgres: ",(0,n.kt)("a",{parentName:"li",href:"https://www.nuget.org/packages/KafkaFlow.Retry.Postgres"},"KafkaFlow.Retry.Postgres")," "),(0,n.kt)("li",{parentName:"ul"},"MongoDb: ",(0,n.kt)("a",{parentName:"li",href:"https://www.nuget.org/packages/KafkaFlow.Retry.MongoDb"},"KafkaFlow.Retry.MongoDb")," ")),(0,n.kt)("p",null,"On the configuration, add the ",(0,n.kt)("inlineCode",{parentName:"p"},"RetryDurable")," middleware extension method to your consumer middlewares to use it. "),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"RetryDurable")," receives an Action as an argument to configure the Retry policy. "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'.AddMiddlewares(\n    middlewares => middlewares // KafkaFlow middlewares\n    .RetryDurable(\n        (config) => config\n            .Handle<NonBlockingException>()\n            .WithMessageType(typeof(OrderMessage)) // Message type to be consumed\n            .WithEmbeddedRetryCluster( // Retry consumer config\n                cluster,\n                config => config\n                    .WithRetryTopicName("order-topic-retry")\n                    .WithRetryConsumerBufferSize(4)\n                    .WithRetryConsumerWorkersCount(2)\n                    .WithRetryConsumerStrategy(RetryConsumerStrategy.GuaranteeOrderedConsumption)\n                    .WithRetryTypedHandlers(\n                        handlers => handlers\n                            .WithHandlerLifetime(InstanceLifetime.Transient)\n                            .AddHandler<Handler>()\n                    ).Enabled(true)\n            )\n            .WithQueuePollingJobConfiguration( // Polling configuration\n                config => config\n                    .WithId("custom_search_key")\n                    .WithCronExpression("0 0/1 * 1/1 * ? *")\n                    .WithExpirationIntervalFactor(1)\n                    .WithFetchSize(10)\n                    .Enabled(true)\n            )\n            \n            .WithMongoDbDataProvider(...)\n            // OR\n            .WithPostgresDataProvider(...)\n            // OR\n            .WithSqlServerDataProvider(...)\n\n            .WithRetryPlanBeforeRetryDurable( // Chained simple retry before triggering durable \n                config => config\n                    .TryTimes(3)\n                    .WithTimeBetweenTriesPlan(\n                        TimeSpan.FromMilliseconds(250),\n                        TimeSpan.FromMilliseconds(500),\n                        TimeSpan.FromMilliseconds(1000))\n                    .ShouldPauseConsumer(false)\n            )\n    )\n    ...\n)\n')),(0,n.kt)("admonition",{type:"info"},(0,n.kt)("p",{parentName:"admonition"},"As you can see above, there's a retry plan configured (",(0,n.kt)("inlineCode",{parentName:"p"},"WithRetryPlanBeforeRetryDurable"),") to execute before the Durable Plan.\nIt's a Simple Retry that can perform a given number of attempts before delegating to the Durable policy.")),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},"You can find other samples ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/Farfetch/kafkaflow-retry-extensions/tree/main/samples"},"here"),".")),(0,n.kt)("h2",{id:"how-to-configure-message-type-and-serialization"},"How to configure Message Type and Serialization"),(0,n.kt)("p",null,"Durable Retries require the definition of a Message Type. It relies on ",(0,n.kt)("a",{parentName:"p",href:"https://farfetch.github.io/kafkaflow/docs/guides/middlewares/serializer-middleware/"},"KafkaFlow Serializer Middleware")," to perform the serialization."),(0,n.kt)("p",null,"You can find here an example using Avro."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},".AddMiddlewares(\n    middlewares => middlewares\n    .AddSchemaRegistryAvroSerializer()\n    .RetryDurable(\n        (config) => config\n            .Handle<RetryDurableTestException>()\n            .WithMessageType(typeof(AvroLogMessage))\n            .WithMessageSerializeSettings(new JsonSerializerSettings\n            {\n                ContractResolver = new WritablePropertiesOnlyResolver()\n            })\n            ...\n    )\n    ...\n)\n")),(0,n.kt)("h2",{id:"how-to-use-mongodb-as-a-provider"},"How to use MongoDb as a Provider"),(0,n.kt)("p",null,"Install the ",(0,n.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/KafkaFlow.Retry.MongoDb"},"KafkaFlow.Retry.MongoDb")," package. "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"dotnet add package KafkaFlow.Retry.MongoDb\n")),(0,n.kt)("p",null,"On the configuration, define the access configuration to the MongoDb instance."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},".AddMiddlewares(\n    middlewares => middlewares \n    .RetryDurable(\n        (config) => config\n            ...\n            .WithMongoDbDataProvider(\n                connectionString,\n                database,\n                retryQueueCollectionName,\n                retryQueueItemCollectionName)\n            ...\n    )\n    ...\n)\n")),(0,n.kt)("h2",{id:"how-to-use-sql-server-as-a-provider"},"How to use SQL Server as a Provider"),(0,n.kt)("p",null,"Install the ",(0,n.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/KafkaFlow.Retry.SqlServer"},"KafkaFlow.Retry.SqlServer")," package. "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"dotnet add package KafkaFlow.Retry.SqlServer\n")),(0,n.kt)("p",null,"On the configuration, define the access configuration to the SqlServer instance."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},".AddMiddlewares(\n    middlewares => middlewares \n    .RetryDurable(\n        (config) => config\n            ...\n            .WithSqlServerDataProvider(\n                connectionString,\n                databaseName)\n            ...\n    )\n    ...\n)\n")),(0,n.kt)("h2",{id:"how-to-use-postgres-as-a-provider"},"How to use Postgres as a Provider"),(0,n.kt)("p",null,"Install the ",(0,n.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/KafkaFlow.Retry.Postgres"},"KafkaFlow.Retry.Postgres")," package. "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"dotnet add package KafkaFlow.Retry.Postgres\n")),(0,n.kt)("p",null,"On the configuration, define the access configuration to the Postgres instance."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},".AddMiddlewares(\n    middlewares => middlewares \n    .RetryDurable(\n        (config) => config\n            ...\n            .WithPostgresDataProvider(\n                connectionString,\n                databaseName)\n            ...\n    )\n    ...\n)\n")),(0,n.kt)("h2",{id:"how-to-configure-an-http-api-to-manage-the-data-provider"},"How to configure an HTTP API to manage the Data Provider"),(0,n.kt)("p",null,"Install the ",(0,n.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/KafkaFlow.Retry.API"},"KafkaFlow.Retry.API")," package. "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"dotnet add package KafkaFlow.Retry.API\n")),(0,n.kt)("p",null,"Once you install the Package, install also the package for the desired storage:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"SqlServer: ",(0,n.kt)("a",{parentName:"li",href:"https://www.nuget.org/packages/KafkaFlow.Retry.SqlServer"},"KafkaFlow.Retry.SqlServer")," "),(0,n.kt)("li",{parentName:"ul"},"Postgres: ",(0,n.kt)("a",{parentName:"li",href:"https://www.nuget.org/packages/KafkaFlow.Retry.Postgres"},"KafkaFlow.Retry.Postgres")," "),(0,n.kt)("li",{parentName:"ul"},"MongoDb: ",(0,n.kt)("a",{parentName:"li",href:"https://www.nuget.org/packages/KafkaFlow.Retry.MongoDb"},"KafkaFlow.Retry.MongoDb")," ")),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},"You can find a sample ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/Farfetch/kafkaflow-retry-extensions/tree/main/samples/KafkaFlow.Retry.API.Sample"},"here"),".")))}d.isMDXComponent=!0}}]);